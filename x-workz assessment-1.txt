1.what is the difference between compile time and run time?
compile time:
          * Compile-time is the time at which the source code is converted into an executable code.
		  * Compile time is when the program is compiled.
		  * The compiler prevents the code from execution if it detects an error in the program.
		  
Run time:
          * runtime is when it executes.
          * The runtime errors are the errors which are not generated by the compiler and produce an unpredictable result at the execution time.
          * The compiler does not detect the error, so it cannot prevent the code from the execution.

2.Explain types of variables with example.
Variable is something where we can store the value.The value of variable can change.
  In Java, there are different types of variables.
   for example:

            * String - stores text, such as "Sahana". String values are surrounded by double quotes
            * int - stores integers (whole numbers), without decimals, such as 121 or -121
            * float - stores floating point numbers, with decimals, such as 20.99 or -20.99
            * char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
            * boolean - stores values with two states: true or false
      
        Syntax of variable:-  type variable = value;
                              String name = "Sahana";

							  
							  
3.Write the example to convert string to primitive.
public class Changer
{
     public static void main(String[] conv)
    {
      String changer="57";

      byte converter=Byte.parseByte(changer);
      System.out.println("byte form of string is:"+ converter);

      short convert=Short.parseShort(changer);
      System.out.println("short form of string is:"+ convert);

      int change=Integer.parseInt(changer);
      System.out.println("int form of string is:"+ change);

      long choose=Long.parseLong(changer);
      System.out.println("long form of string is:"+ choose);

      float choice=Float.parseFloat(changer);
      System.out.println("float form of string is:"+ choice);

      double select=Double.parseDouble(changer);
      System.out.println("double form of string is:"+ select);

      boolean option=Boolean.parseBoolean(changer);
      System.out.println("boolean form of string is:"+ option);
	  
    }
}


4.Explain method,parameter,argument and return types with example.
* method:- A Java method is a collection of statements that are grouped together to perform an operation.
           A method is a block of code which only runs when it is called.
		    Syntax:- public static int methodName(int a, int b) 
			{
                 // body
            }
			Here,
                public static − modifier
                int − return type
                methodName − name of the method
                a, b − formal parameters
                int a, int b − list of parameters
				

* parameter:- Parameters act as variables inside the method.
              Parameters are specified after the method name, inside the parentheses.
			  
* argument:- An argument is a value passed to a function when the function is called.
             Whenever any function is called during the execution of the program there are some values passed with the function. These values are called arguments.
			 
* return types:- return keyword is used to complete the execution of a method.
                 A return statement causes the program control to transfer back to the caller of a method.
				 return type may be a primitive type like int, float, double, a reference type or void type.
				 

   example:- public class MinNumber 
             {
   
               public static void main(String[] args) 
			 {
               int a = 11;
               int b = 6;
               int c = minFunction(a, b);
               System.out.println("Minimum Value = " + c);
             }

   
               public static int minFunction(int n1, int n2)
			 {
               int min;
               if (n1 > n2)
               min = n2;
               else
               min = n1;

            return min; 
             }
             }
			 
5. What is encapsulation? explain with example.
Encapsulation can be obtained by making all the data members of the class private. 
Now we can use setter and getter methods to set and get the data in it.
Encapsulation in Java is a process of wrapping code and data together into a single unit.
example:- Thief.java
      
	      public class Thief
		  {
              public static void steal()
              {
	              System.out.println("invoked steal");
	              double pocket=Reliance.getBudget();
	              System.out.println("steal budget "+pocket);
	              System.out.println("Reliance budget "+Reliance.getBudget());
	              System.out.println("EXIT :: steal");
	          }
          }
		  
		  ThiefTester.java
		  
		  public class ThiefTester
		  {
             public static void main(String[] runT)
             {
                System.out.println("JVM invoked main");
		        Thief.steal();
                System.out.println("EXIT :: main");
             }	
	      }
		  
		  
6. Explain array with example.
An array is a collection of similar type of elements which has contiguous memory location.
array is an object which contains elements of a similar data type
      Syntax:- arrayRefVar=new datatype[size]; 
	  example:- class Testarray
	            {  
                    public static void main(String args[])
					{  
                       int a[]=new int[5];  
                       a[0]=10;  
                       a[1]=20;  
                       a[2]=70;  
                       a[3]=40;  
                       a[4]=50;  
  
                    for(int i=0;i<a.length;i++)
                    System.out.println(a[i]);  
                    }
				} 

7.Write code to display elements of array.
public class Array 
{
    public static void main(String[] args) 
	{
        int[] array = {1, 2, 3, 4, 5};

        System.out.println(Arrays.toString(array));
    }
}


8.Explain Method overloading with two example.
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.
example:-
 * Table.java
    
public class Table 
{
	
	
	public static void holding(String thing)
	{
		
		System.out.println("invoked holding");
		System.out.println("arg thing: "+thing);
		
	}
	public static void holding(String something,String noOfPlates)
	{
		System.out.println("invoked holding with two parameters ");
		System.out.println("String and String");
		System.out.println("arg1 something"+something);
		System.out.println("arg2 noOfPlates"+noOfPlates);
		
	}
	
	public static void holding(String something,int noOfPlates)
	{
		
		System.out.println("invoked holding with two parameters ");
		System.out.println("String and int");
		System.out.println("arg1 something"+something);
		System.out.println("arg2 noOfPlates"+noOfPlates);
	}
	
	public static void holding(int noOfPlates,String something)
	{
		System.out.println("invoked holding with two parameters ");
		System.out.println("int and String");
		System.out.println("arg1 noOfPlates"+noOfPlates);
		System.out.println("arg2 something"+something);
		
	}
}	

* TableTester.java

public class TableTester
{
public static void main(String[] somethings)
{
	System.out.println("JVM invoked main");	
	System.out.println("main method args length"+somethings.length);	
        
		String book="Comic";
		Table.holding(book);

		Table.holding(book,6);
		
		Table.holding(book,"spoon");


	System.out.println("EXIT :: main");	
}
}


Cancer.java

public class Cancer
{
	public static void type(String nameOfCancer)
	{
		
		System.out.println("name of the cancer: "+ nameOfCancer);
				
	}	
	
	public static void type(int numberOfCancerPatients)
	{
		
		System.out.println("number of the cancer patients: "+ numberOfCancerPatients);
				
	}
	public static void type(int typesOfCancer,int typesOfTreatment)
	{
		
		System.out.println("The type of cancer are: "+ typesOfCancer);
		System.out.println("The type of treatment are: "+ typesOfTreatment);
				
	}
		
}


CancerTester.java

public class CancerTester
{
	public static void main(String[] disease)
	{
		System.out.println("JVM invokes main");
		String cancer="Deadly Disease";
		Cancer.type(cancer);
		Cancer.type(10000000);
		Cancer.type(10,10);
		
		System.out.println("exit from main");
	}
}
